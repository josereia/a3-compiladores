import java_cup.runtime.*;

parser code
{:
      public void newError(int line, int column, String text) {
            Lexer lexer = (Lexer) this.getScanner();
            lexer.newError(line, column, text);
      }
:};

terminal COLON, SEMICOLON;
terminal PLUS, MINUS, TIMES, SLASH;
terminal EQUAL, EQUALTO, LESS, LESSEQUAL, GREATER, GREATEREQUAL, NOTEQUAL;
terminal LEFTPAR, RIGHTPAR, LEFTBRACE, RIGHTBRACE, LEFTBRACKET, RIGHTBRACKET;
terminal STRVAR, INTVAR, FUNC;
terminal VOID, RETURN;

terminal Integer INTEGER;
terminal String STRING, IDENTIFIER;

non terminal Integer expr, term, factor;
non terminal Object expr_list, expr_semicolon;
non terminal Object var, return, args, func;

expr_list ::= expr_list expr_semicolon
            | expr_semicolon;

expr_semicolon ::= var SEMICOLON | func SEMICOLON;

expr ::= expr PLUS term
      | expr MINUS term
      | MINUS term
      | term;

term ::= factor TIMES term
      | factor:f SLASH term:t {:
        if(t == 0) {
          newError(tleft, tright, "Divis√£o por zero!");
        } else {
          RESULT = f/t;
        }
      :}
      | factor;

factor ::= INTEGER | LEFTPAR expr RIGHTPAR;

var ::= STRVAR IDENTIFIER:i EQUAL STRING
      | INTVAR IDENTIFIER:i EQUAL expr
      | STRVAR IDENTIFIER:i
      | INTVAR IDENTIFIER:i;

return ::= RETURN IDENTIFIER:i SEMICOLON
      | RETURN STRING SEMICOLON
      | RETURN INTEGER SEMICOLON;

args ::= LEFTPAR var RIGHTPAR;
func ::= IDENTIFIER:i args | IDENTIFIER:i LEFTPAR RIGHTPAR;
func ::= VOID func LEFTBRACE expr_list RIGHTBRACE
      | STRVAR func LEFTBRACE expr_list return RIGHTBRACE
      | INTVAR func LEFTBRACE expr_list return RIGHTBRACE;